try {
  const TelegramBot = require("node-telegram-bot-api");
  const fs = require("fs");
  const sqlite3 = require("sqlite3").verbose();
  require("dotenv").config();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  const bot = new TelegramBot(process.env.API_KEY, { polling: true });
  const db = new sqlite3.Database("./tasks.db");

  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      chatId INTEGER,
      title TEXT,
      description TEXT,
      deadline TEXT,
      executor TEXT CHECK(executor IN ('–ú–£–ü', '–ú–û–ü', '–î–∏—Ä–µ–∫—Ç–æ—Ä', '–ö–æ–ª–ª–µ–¥–∂')),
      status TEXT DEFAULT '–ù–æ–≤–∞—è',
      photos TEXT DEFAULT '[]',
      createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userStates = {};
  const Executors = ["–ú–£–ü", "–ú–û–ü", "–î–∏—Ä–µ–∫—Ç–æ—Ä", "–ö–æ–ª–ª–µ–¥–∂"];

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  const commands = [
    { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
    { command: "newtask", description: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É" },
    { command: "alltasks", description: "–í—Å–µ –∑–∞–¥–∞—á–∏" },
    { command: "categorytasks", description: "–ó–∞–¥–∞—á–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º" },
  ];

  bot.setMyCommands(commands);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];

  const dayNames = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
  bot.on("photo", async (msg) => {
    const chatId = msg.chat.id;
    const state = userStates[chatId];

    if (state?.step === "photo") {
      try {
        // –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ñ–æ—Ç–æ
        const photo = msg.photo[msg.photo.length - 1];
        state.data.photos = state.data.photos || [];
        state.data.photos.push(photo.file_id);

        await bot.sendMessage(chatId, '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"', {
          reply_markup: {
            keyboard: [["–ì–æ—Ç–æ–≤–æ"]],
            resize_keyboard: true,
          },
        });
      } catch (error) {
        console.error("Error processing photo:", error);
        await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ");
      }
    }
  });
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("text", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    try {
      if (text.startsWith("/start" || text === "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
        await showMainMenu(chatId);
      } else if (text === "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" || text === "/newtask") {
        await startTaskCreation(chatId);
      } else if (text === "üåê –í—Å–µ –∑–∞–¥–∞—á–∏" || text === "/alltasks") {
        await showAllTasks(chatId);
      } else if (text === "üÜò –ü–æ–º–æ—â—å") {
        await showHelp(chatId);
      } else if (text === "üë• –ó–∞–¥–∞—á–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é" || text === "/categorytasks") {
        await showExecutorFilterMenu(chatId);
      } else if (userStates[chatId]?.step) {
        await handleTaskState(chatId, text);
      } else {
        await bot.sendMessage(chatId, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞");
        await showMainMenu(chatId);
      }
    } catch (error) {
      console.error(error);
      await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
    }
  });

  // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  async function startTaskCreation(chatId) {
    userStates[chatId] = {
      step: "title",
      data: {},
    };
    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
  }
  async function showHelp(chatId) {
    await bot.sendMessage(
      chatId,
      `üÜò –°–ø—Ä–∞–≤–∫–∞:\n\n1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"\n2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á - "üåê –í—Å–µ –∑–∞–¥–∞—á–∏"\n3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á - "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"`,
      {
        parse_mode: "Markdown",
      }
    );
  }

  // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  async function showExecutorFilterMenu(chatId) {
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ú–£–ü", callback_data: "filter_–ú–£–ü" }],
          [{ text: "–ú–û–ü", callback_data: "filter_–ú–û–ü" }],
          [{ text: "–î–∏—Ä–µ–∫—Ç–æ—Ä", callback_data: "filter_–î–∏—Ä–µ–∫—Ç–æ—Ä" }],
          [{ text: "–ö–æ–ª–ª–µ–¥–∂", callback_data: "filter_–ö–æ–ª–ª–µ–¥–∂" }],
        ],
      },
    });
  }

  async function handleTaskState(chatId, text) {
    const state = userStates[chatId];

    switch (state.step) {
      case "title":
        state.data.title = text;
        state.step = "description";
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
        break;

      case "description":
        state.data.description = text;
        state.step = "deadline";
        await sendCalendar(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        break;

      // case "deadline":
      //   if (!isValidDate(text)) {
      //     return await bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì");
      //   }
      //   state.data.deadline = text;
      //   state.step = "executor";
      //   await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", {
      //     reply_markup: {
      //       keyboard: [Executors],
      //       resize_keyboard: true,
      //     },
      //   });
      //   break;

      case "executor":
        if (!Executors.includes(text)) {
          return await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤");
        }
        state.data.executor = text;
        state.step = "photo";
        await bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'", {
          reply_markup: {
            keyboard: [["–ì–æ—Ç–æ–≤–æ"]],
            resize_keyboard: true,
          },
        });
        break;

      case "photo":
        if (text === "–ì–æ—Ç–æ–≤–æ") {
          await saveTaskToDB(chatId, state.data);
          delete userStates[chatId];
          await bot.sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", {
            reply_markup: { remove_keyboard: true },
          });
        }
        break;
    }
  }

  // // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
  // function isValidDate(dateString) {
  //   const pattern = /^(\d{2})\.(\d{2})\.(\d{4})$/;
  //   return pattern.test(dateString);
  // }
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
  async function sendCalendar(chatId, date = new Date()) {
    const keyboard = generateCalendarKeyboard(date);
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
  }
  function generateCalendarKeyboard(date = new Date()) {
    const year = date.getFullYear();
    const month = date.getMonth();
    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
    const firstDay = new Date(year, month, 1);
    let startDay = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;

    const keyboard = [];

    // –®–∞–ø–∫–∞ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    keyboard.push([
      {
        text: `${monthNames[month]} ${year}`,
        callback_data: "ignore",
      },
    ]);

    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    keyboard.push(dayNames.map((day) => ({ text: day, callback_data: "ignore" })));

    // –Ø—á–µ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    let week = [];
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞
    for (let i = 0; i < startDay; i++) {
      week.push({ text: " ", callback_data: "ignore" });
    }

    for (let day = 1; day <= daysInMonth; day++) {
      const callbackData = `date_${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
      week.push({ text: String(day), callback_data: callbackData });

      if (week.length === 7) {
        keyboard.push(week);
        week = [];
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
    if (week.length > 0) {
      while (week.length < 7) {
        week.push({ text: " ", callback_data: "ignore" });
      }
      keyboard.push(week);
    }

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.push([
      {
        text: "‚óÄÔ∏è",
        callback_data: `prevmonth_${year}-${month}`,
      },
      {
        text: "‚ñ∂Ô∏è",
        callback_data: `nextmonth_${year}-${month}`,
      },
    ]);

    return keyboard;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
  function saveTaskToDB(chatId, taskData) {
    return new Promise((resolve, reject) => {
      db.run(
        `INSERT INTO tasks (chatId, title, description, deadline, executor, photos) 
         VALUES (?, ?, ?, ?, ?, ?)`,
        [chatId, taskData.title, taskData.description, taskData.deadline, taskData.executor, JSON.stringify(taskData.photos || [])],
        (err) => {
          if (err) reject(err);
          else resolve();
        }
      );
    });
  }

  async function showAllTasks(chatId) {
    db.all("SELECT * FROM tasks ORDER BY deadline", async (err, tasks) => {
      if (err) {
        console.error(err);
        return await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á");
      }

      if (tasks.length === 0) {
        return await bot.sendMessage(chatId, "–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ");
      }

      for (const task of tasks) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        const photos = JSON.parse(task.photos || "[]");
        if (photos.length > 0) {
          await bot.sendMediaGroup(
            chatId,
            photos.map((photo_id) => ({
              type: "photo",
              media: photo_id,
            }))
          );
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        await bot.sendMessage(chatId, formatTask(task), createTaskKeyboard(task));
      }
    });
  }

  // –ú–µ–Ω—é
  async function showMainMenu(chatId) {
    await bot.sendMessage(chatId, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
      reply_markup: {
        keyboard: [["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "üë• –ó–∞–¥–∞—á–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"], ["üåê –í—Å–µ –∑–∞–¥–∞—á–∏"]],
        resize_keyboard: true,
      },
    });
  }

  bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const messageId = query.message.message_id;

    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      if (data.startsWith("status_")) {
        const [action, taskId, newStatus, executor] = data.split("_");
        await updateTaskStatus(taskId, newStatus);
        await bot.answerCallbackQuery(query.id, { text: "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!" });
        await bot.deleteMessage(chatId, messageId);
        await showTasksByExecutor(chatId, executor);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
      if (data.startsWith("delete_")) {
        const taskId = data.split("_")[1];
        const executor = data.split("_")[2];
        await deleteTask(taskId);
        await bot.answerCallbackQuery(query.id, { text: "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!" });
        await bot.deleteMessage(chatId, messageId);
        await showTasksByExecutor(chatId, executor);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
      if (data.startsWith("filter_")) {
        const executor = data.split("_")[1];
        await showTasksByExecutor(chatId, executor);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
      if (data.startsWith("date_")) {
        const selectedDate = data.split("_")[1];
        const [year, month, day] = selectedDate.split("-");

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        userStates[chatId].data.deadline = `${day}.${month}.${year}`;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        await bot.deleteMessage(chatId, messageId);

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        userStates[chatId].step = "executor";
        await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", {
          reply_markup: {
            keyboard: [Executors],
            resize_keyboard: true,
          },
        });
      }

      if (data.startsWith("prevmonth_") || data.startsWith("nextmonth_")) {
        const [action, params] = data.split("_");
        const [yearStr, monthStr] = params.split("-");
        const year = parseInt(yearStr);
        const month = parseInt(monthStr);
        let newDate = new Date(year, month);

        if (action === "prevmonth") {
          newDate.setMonth(newDate.getMonth() - 1);
        } else {
          newDate.setMonth(newDate.getMonth() + 1);
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        try {
          await bot.editMessageReplyMarkup(
            {
              inline_keyboard: generateCalendarKeyboard(newDate),
            },
            {
              chat_id: chatId,
              message_id: messageId,
            }
          );
        } catch (e) {
          console.error("Error updating calendar:", e);
        }
      }
    } catch (error) {
      console.error(error);
      await bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏!" });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  async function updateTaskStatus(taskId, newStatus) {
    return new Promise((resolve, reject) => {
      db.run("UPDATE tasks SET status = ? WHERE id = ?", [newStatus, taskId], (err) => (err ? reject(err) : resolve()));
    });
  }
  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  async function deleteTask(taskId) {
    return new Promise((resolve, reject) => {
      db.run("DELETE FROM tasks WHERE id = ?", [taskId], (err) => (err ? reject(err) : resolve()));
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
  async function showTasksByExecutor(chatId, executor) {
    db.all("SELECT * FROM tasks WHERE executor = ? ORDER BY deadline", [executor], async (err, tasks) => {
      if (err) {
        console.error(err);
        return await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á");
      }

      if (tasks.length === 0) {
        return await bot.sendMessage(chatId, `–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${executor}`);
      }

      for (const task of tasks) {
        await bot.sendMessage(chatId, formatTask(task), createTaskKeyboard(task));
      }
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  function createTaskKeyboard(task) {
    return {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data: `status_${task.id}_–ó–∞–≤–µ—Ä—à–µ–Ω–∞_${task.executor}` },
            { text: "‚úèÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data: `status_${task.id}_–í —Ä–∞–±–æ—Ç–µ__${task.executor}` },
          ],
          [{ text: "‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_${task.id}_${task.executor}` }],
        ],
      },
    };
  }

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
  function formatTask(task) {
    let text = `
    üîπ ${task.title}
    üìÖ –°—Ä–æ–∫: ${task.deadline}
    üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.executor}
    üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}
    üîÑ –°—Ç–∞—Ç—É—Å: ${task.status}
    üì∏ –§–æ—Ç–æ: ${JSON.parse(task.photos).length} —à—Ç.
    
    [ID: ${task.id}]
        `.trim();

    return text;
  }
} catch (e) {
  console.log(e);
}
